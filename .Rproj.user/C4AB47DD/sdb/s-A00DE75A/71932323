{
    "collab_server" : "",
    "contents" : "#' @title get_boxscore_stats\n#' @description Function to scrape offense stats and snap counts tables.\n#' Generates defensive tables from offense stats.\n#'\n#' @param url Url of boxscore.\n#' @param insert Should the function insert the data into the nfl_offense and\n#' nfl_defense tables? Defaults to FALSE.\n#'\n#' @return Returns list containing offensive stats (off_stats) and defensive\n#' stats (def_stats)\n#' @export\nget_boxscore_stats <- function(url, insert = FALSE) {\n    # http://stackoverflow.com/questions/39232596/how-to-get-table-using-rvest\n    html <- xml2::read_html(url) %>%\n        rvest::html_node('body')\n\n    # Only save and work with the body\n    xml2::write_xml(html, \"nfl.xml\")\n\n    # Find and remove comments\n    html <- readLines(\"nfl.xml\")\n    html <- html[-grep(\"<!--\", html)]\n    html <- html[-grep(\"-->\", html)]\n    writeLines(html, \"nfl.xml\")\n\n    # Read the file back in and process normally\n    html <-xml2::read_html(\"nfl.xml\")\n\n    # table 4 - stats, table 10 and 11 snap counts\n    tables <- html %>%\n        rvest::html_nodes('table.sortable.stats_table') %>%\n        rvest::html_table()\n\n    names(tables) <- html %>%\n        rvest::html_nodes('table.sortable.stats_table') %>%\n        rvest::html_attr('id')\n\n    file.remove('nfl.xml')\n\n    # offensive stats, put names in sysdata\n    off_stats <- tables$player_offense\n    names(off_stats) <- c(\n        'player', 'tm', 'cmp', 'pa_att', 'pa_yds', 'pa_td', 'int', 'sk', 'sk_yds',\n        'pa_lng', 'rate', 'ru_att', 'ru_yds', 'ru_td', 'ru_lng', 'tgt', 'rec',\n        'rec_yds', 'rec_td', 'rec_lng', 'fmb', 'fmbl'\n    )\n\n    off_stats %<>%\n        dplyr::filter(!player %in% c('Player' ,'')) %>%\n        dplyr::group_by(player,tm) %>%\n        dplyr::mutate_each(dplyr::funs(as.numeric)) %>%\n        dplyr::ungroup()\n\n    # table to join to get opponent\n    opp <- data.frame(tm = unique(off_stats$tm)) %>%\n        dplyr::mutate(opp = rev(tm)) %>%\n        dplyr::mutate_each(dplyr::funs(as.character))\n\n    off_stats %<>%\n        dplyr::left_join(y = opp, by = 'tm') %>%\n        dplyr::select(-sk, -sk_yds, -pa_lng, -rate, -ru_lng, -rec_lng)\n\n    # get snap counts for offensive players\n    if (any(grepl('snap_counts', names(tables)))) {\n        inds <- (1:length(tables))[grepl('snap_counts', names(tables))]\n        snap_counts <- do.call(rbind, tables[inds])\n        names(snap_counts) <- c('player', 'pos', 'snaps', 'snap_pct',\n                                'def_num', 'def_pct', 'st_num', 'st_pct')\n\n        snap_counts %<>%\n            dplyr::filter(snaps != '0', player != 'Player') %>%\n            dplyr::select(player, pos, snaps, snap_pct) %>%\n            dplyr::mutate(snaps = as.numeric(snaps),\n                          snap_pct = readr::parse_number(snap_pct),\n                          pos = replace(pos, pos == 'FB', 'RB'))\n    } else {\n        stop\n    }\n    # create table home_date to join with who was home / away based on header\n    # and date of game\n    nfl_teams <- db_query(query = 'select * from nfl_teams')\n\n    matchup_date <- xml2::read_html(url) %>%\n        rvest::html_node('h1') %>%\n        rvest::html_text() %>%\n        strsplit(., ' - ') %>% unlist()\n\n    date <- as.POSIXct(gsub('th|rd|st|nd', '', matchup_date[2]),\n                       format = '%B %d, %Y')\n\n    home_date <- trimws(unlist(strsplit(matchup_date[1], ' at '))) %>%\n        data.frame() %>%\n        dplyr::rename_('team_long' = '.') %>%\n        dplyr::mutate(home = c(0, 1),\n                      team_long = as.character(team_long),\n                      date = date)\n\n    home_date %<>% dplyr::left_join(y = nfl_teams, by = 'team_long')\n\n    # join snap data, home, date, to offensive stats\n    off_stats %<>%\n        dplyr::left_join(\n            y = snap_counts %>%\n                dplyr::select(\n                    player,\n                    pos,\n                    snaps,\n                    snap_pct\n                ),\n            by = 'player'\n        ) %>%\n        dplyr::left_join(\n            y = home_date %>% dplyr::select(-team_long),\n            by = c('tm' = 'team_abbr')\n        )\n\n    # defensive stats\n    def_stats <- off_stats %>%\n        dplyr::select(-player, -tm, -snap_pct, -home, -date) %>%\n        dplyr::rename(tm = opp) %>%\n        dplyr::group_by(tm, pos) %>%\n        dplyr::summarise_each(dplyr::funs(sum)) %>%\n        dplyr::rename(def_num = snaps) %>%\n        dplyr::left_join(\n            y = home_date %>% dplyr::select(-team_long),\n            by = c('tm' = 'team_abbr')\n        )\n\n    reps <- def_stats %>%\n        dplyr::group_by(tm) %>%\n        dplyr::summarise(count = n()) %>%\n        .$count\n\n    snaps <- rep(def_stats %>%\n                     dplyr::filter(pos == 'QB') %>%\n                     .$def_num,\n                 times = reps)\n\n    def_stats$def_num <- snaps\n\n    # if one position did not get stats, fill with 0\n    fill_def_stats <- data.frame(\n        tm = rep(home_date$team_abbr, each = 4),\n        pos = rep(c('QB', 'RB', 'WR', 'TE'), times = 2)\n    ) %>%\n        dplyr::mutate_each(dplyr::funs(as.character)) %>%\n        dplyr::left_join(\n            y = def_stats,\n            by = c('tm', 'pos')\n        )\n\n    blanks <- is.na(fill_def_stats)\n\n    fill_def_stats[, 3:16][blanks[, 3:16]] <- 0\n    fill_def_stats[17:19] %<>% lapply(., zoo::na.locf)\n\n    week_date <- db_query(query = 'select * from nfl_week_date') %>%\n        dplyr::mutate(date = as.POSIXct(date, format = '%Y-%m-%d'))\n\n    off_stats %<>%\n        dplyr::left_join(\n            y = week_date,\n            by = 'date'\n        ) %>%\n        dplyr::mutate(\n            dk_pts = pa_yds / 25 + pa_td * 4 + ifelse(pa_yds >= 300, 3, 0) -\n                int + ru_yds / 10 + ru_td * 6 + ifelse(ru_yds >= 100, 3, 0) +\n                rec_yds / 10 + rec_td * 6 + rec + ifelse(rec_yds >= 100, 3, 0) -\n                fmbl\n        )\n    fill_def_stats %<>%\n        dplyr::left_join(\n            y = week_date,\n            by = 'date'\n        )\n\n    if (insert) {\n        db_insert(table = 'nfl_offense', df = off_stats)\n        db_insert(table = 'nfl_defense', df = def_stats)\n        invisible(list(off_stats = off_stats, def_stats = fill_def_stats))\n    } else {\n        return(list(off_stats = off_stats, def_stats = fill_def_stats))\n    }\n}\n",
    "created" : 1473982372895.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4166909963",
    "id" : "71932323",
    "lastKnownWriteTime" : 1473977151,
    "last_content_update" : 1473977151,
    "path" : "~/Documents/dfstoolkit/R/get_boxscore_stats.R",
    "project_path" : "R/get_boxscore_stats.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}